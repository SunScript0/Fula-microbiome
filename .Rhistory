if (a[i, "TimePoint"] != 1 | a[i, "EntColi"] == 2) {
next
}
id = a[i,"Index"]
if (nrow(a[a$TimePoint == 2 & a$Index == id, ]) != 1) {
next
}
has_entColi_t2 = a[a$TimePoint == 2 & a$Index == id, "EntColi"] == 2
if (has_entColi_t2) {
a[i, "EntColi"] = 1
}
}
a$EntColi = as.factor(a$EntColi)
ggplot(a, aes(x=PC1, y=PC2, color=EntColi)) +
geom_point(size=2.5)
a %>%
filter(Group4 == "Adult.1") %>%
mutate(SubLocation = str_replace_all(SubLocation, " ", "\n")) %>%
ggplot(aes(x = SubLocation, fill = EntColi))+
geom_bar() +
facet_wrap(~Location, scales = "free")
plots$beta_extra = list()
# Nicer metric names for plotting
metric_names = list()
metric_names$bray = "Bray-Curtis"
metric_names$unifracU = "UniFracU"
metric_names$unifracW = "UniFracW"
for (metric in c("bray", "unifracU", "unifracW")) {
dists = in_vs_out_group_dists(beta[[metric]], meta, "Location")
# Are individuals closer to each other in rural as compared to urban?
p1 = dists %>%
filter(type == "in_group") %>%
ggplot(., aes(x=Location.x, y=value))+
geom_boxplot()+
stat_compare_means()+
ggtitle("In group distances, all individuals")
# Are mothers closer to each other in rural as compared to urban?
p2 = dists %>%
filter(type == "in_group") %>%
filter(AdultChild.x == "Adult", AdultChild.y == "Adult") %>%
ggplot(., aes(x=Location.x, y=value))+
geom_boxplot()+
stat_compare_means()+
ggtitle("In group distances, mothers")
# Are infants closer to each other in rural as compared to urban?
p3 = dists %>%
filter(type == "in_group") %>%
filter(AdultChild.x == "Child", AdultChild.y == "Child") %>%
ggplot(., aes(x=Location.x, y=value))+
geom_boxplot()+
stat_compare_means()+
ggtitle("In group distances, infants")
plots$beta_extra[[paste0("in_group_", metric)]] = ggarrange(p1, p2, p3, ncol = 3)
# Are infants closer to adults in rural as compared to urban?
dists2 = dists %>%
filter(type == "in_group") %>%
filter(AdultChild.x != AdultChild.y) %>%
filter(TimePoint.x == TimePoint.y) %>%
mutate(LocationTime = interaction(Location.x, TimePoint.x))
dist_comp = my_compare_means(dists2, "value", "Location.x", "TimePoint.x") %>%
mutate(group1 = interaction("Rural", TimePoint.x))%>%
mutate(group2 = interaction("Urban", TimePoint.x)) %>%
mutate(p.format = formatC(p, 2))
print(dist_comp)
plots$beta_extra[[paste0("adu_child_dist_", metric)]] = dists2 %>%
mutate(grp4 = interaction(Location.x, TimePoint.x)) %>%
ggplot(., aes(x=grp4, y=value))+
geom_violin(aes(color=grp4, fill=grp4))+
geom_boxplot(width=0.1, outlier.shape = NA, aes(color=grp4))+
scale_color_manual(values = cols$adults)+
scale_fill_manual(values = cols$infants)+
stat_pvalue_manual(dist_comp, y.position = 1.1*max(dists2$value), size = pval_size, label="p.format")+
ggtitle("Adult-infant distances")+
theme(plot.title = element_text(hjust = 0.5)) +
ylim(0, 1.2)+
theme(legend.position="none")+
labs(y=metric_names[[metric]], x=NULL) +
scale_x_discrete(labels=c(
"Rural\nT1", "Urban\nT1",
"Rural\nT2", "Urban\nT2"))
}
plots$beta_extra$in_group_bray
plots$beta_extra$in_group_unifracW
plots$beta_extra$adu_child_dist_bray
cat("Rural infants are ahead in 'maturation', is it because they're older?\n")
meta %>%
filter(AdultChild == "Child") %>%
group_by(Group3) %>%
summarize(mean(AgeC))
0.3*30
3-2.83
0.17*30
cat("They are only 9 days older on average, is this difference significant?\n")
meta %>%
filter(AdultChild == "Child") %>%
t.test(AgeC ~ Location, .)
dodge_w = 0.85
dodge = position_dodge(width = dodge_w)
for (metric in c("bray", "unifracU", "unifracW")) {
# Distances between mothers and children at same timepoint
# Groups if same index
dists = in_vs_out_group_dists(beta[[metric]], meta, "Index", list(
"AdultChild.x != AdultChild.y",
"TimePoint.x == TimePoint.y"
))
dist_comp = my_compare_means(dists, "value", "type", "TimePoint") %>%
mutate(group1 = "in_group")%>%
mutate(group2 = "out_group") %>%
mutate(xmin= c(1-dodge_w/4, 2-dodge_w/4)) %>%
mutate(xmax= c(1+dodge_w/4, 2+dodge_w/4)) %>%
mutate(p.format = formatC(p, 2))
# Are related mother-child pairs more similar than unrelated pairs?
plots$beta_extra[[paste0("relatedness_effect_", metric)]] =
ggplot(dists, aes(x=TimePoint, y=value, color=type))+
geom_violin(position=dodge, aes(fill=type), alpha=0.5)+
geom_boxplot(position=dodge, width = 0.1, outlier.shape = NA)+
stat_pvalue_manual(dist_comp, y.position = 1.1*max(dists$value), size = pval_size, label="p.format")+
scale_color_discrete(name = "Relationship", labels = c("Related", "Not related"))+
scale_fill_discrete(name = "Relationship", labels = c("Related", "Not related"))+
labs(y=metric_names[[metric]])+
ylim(c(0,1.2))
# Are infants closer to their mothers in rural as compared to urban?
plots$beta_extra[[paste0("mother_own_child_dists_", metric)]] =
dists %>%
filter(type == "in_group") %>%
ggplot(., aes(x=Location.x, y=value))+
geom_boxplot()+
labs(y="Mother-child distances")+
stat_compare_means()+
ylim(c(0,1.2))
}
plots$beta_extra$relatedness_effect_bray
plots$beta_extra$mother_own_child_dists_bray
View(plots)
samples_to_keep = rownames(filter(meta, AdultChild == "Child"))
adonis_data = list()
adonis_data$bray = prep_for_adonis(beta$bray, meta, samples_to_keep, c("Gender", "AgeC", "AgeM", "FirstMeal", "SinceDivers.", "BMI"))
adonis_data$unifracU = prep_for_adonis(beta$unifracU, meta, samples_to_keep, c("Gender", "AgeC", "AgeM", "FirstMeal", "SinceDivers.", "BMI"))
adonis_data$unifracW = prep_for_adonis(beta$unifracW, meta, samples_to_keep, c("Gender", "AgeC", "AgeM", "FirstMeal", "SinceDivers.", "BMI"))
nperms = 1000
set.seed(1337)
# Just location
adonis2(as.dist(adonis_data$bray[[1]]) ~ Location,
data = adonis_data$bray[[2]],
by = "terms",
permutations = nperms)
adonis2(as.dist(adonis_data$unifracU[[1]]) ~ Location,
data = adonis_data$unifracU[[2]],
by = "terms",
permutations = nperms)
adonis2(as.dist(adonis_data$unifracW[[1]]) ~ Location,
data = adonis_data$unifracW[[2]],
by = "terms",
permutations = nperms)
# Just sublocation
adonis2(as.dist(adonis_data$bray[[1]]) ~ SubLocation,
data = adonis_data$bray[[2]],
by = "terms",
permutations = nperms)
nperms = 1000
set.seed(1337)
# Just location
adonis2(as.dist(adonis_data$bray[[1]]) ~ Location,
data = adonis_data$bray[[2]],
by = "terms",
permutations = nperms)
adonis2(as.dist(adonis_data$unifracU[[1]]) ~ Location,
data = adonis_data$unifracU[[2]],
by = "terms",
permutations = nperms)
adonis2(as.dist(adonis_data$unifracW[[1]]) ~ Location,
data = adonis_data$unifracW[[2]],
by = "terms",
permutations = nperms)
# Bray-Curtis with location + more variables
plots$beta_ado$chi_bray_loc =
adonis2(as.dist(adonis_data$bray[[1]]) ~ Location+AgeC+Gender+BMI,
data = adonis_data$bray[[2]],
by = "margin",
permutations = nperms) %>%
slice(1:(n()-2)) %>%
arrange(-R2) %>%
rownames_to_column(var="Variable") %>%
mutate(Variable = fct_reorder(Variable, R2)) %>%
mutate(Sig = stars.pval(`Pr(>F)`)) %>%
ggplot(., aes(x=Variable, y=R2))+
geom_bar(stat = "identity") +
geom_text(aes(label = Sig, y = R2*1.1), size=6, vjust=0.5, hjust=0) +
ylim(c(0, 0.10))+
coord_flip()+
scale_x_discrete(labels = c("Location"="Environment", "AgeC" = "Age"))+
labs(x="")+
ggtitle("Bray-Curtis")+
theme(plot.title = element_text(hjust = 0.5))
# UniFracU with location + more variables
plots$beta_ado$chi_uniU_loc =
adonis2(as.dist(adonis_data$unifracU[[1]]) ~ Location+AgeC+Gender+BMI,
data = adonis_data$unifracU[[2]],
by = "margin",
permutations = nperms) %>%
slice(1:(n()-2)) %>%
arrange(-R2) %>%
rownames_to_column(var="Variable") %>%
mutate(Variable = fct_reorder(Variable, R2)) %>%
mutate(Sig = stars.pval(`Pr(>F)`)) %>%
ggplot(., aes(x=Variable, y=R2))+
geom_bar(stat = "identity") +
geom_text(aes(label = Sig, y = R2*1.1), size=6, vjust=0.5, hjust=0) +
ylim(c(0, 0.16))+
coord_flip()+
scale_x_discrete(labels = c("Location"="Environment", "AgeC" = "Age"))+
labs(x="")+
ggtitle("UniFracU")+
theme(plot.title = element_text(hjust = 0.5))
# UniFracW with location + more variables
plots$beta_ado$chi_uniW_loc =
adonis2(as.dist(adonis_data$unifracW[[1]]) ~ Location+AgeC+Gender+BMI,
data = adonis_data$unifracW[[2]],
by = "margin",
permutations = nperms) %>%
slice(1:(n()-2)) %>%
arrange(-R2) %>%
rownames_to_column(var="Variable") %>%
mutate(Variable = fct_reorder(Variable, R2)) %>%
mutate(Sig = stars.pval(`Pr(>F)`)) %>%
ggplot(., aes(x=Variable, y=R2))+
geom_bar(stat = "identity") +
geom_text(aes(label = Sig, y = R2*1.1), size=6, vjust=0.5, hjust=0) +
ylim(c(0, 0.16))+
coord_flip()+
scale_x_discrete(labels = c("Location"="Environment", "AgeC" = "Age"))+
labs(x="")+
ggtitle("UniFracW")+
theme(plot.title = element_text(hjust = 0.5))
samples_to_keep = rownames(filter(meta, Group4 == "Child.2"))
adonis_data = list()
adonis_data$bray = prep_for_adonis(beta$bray, meta, samples_to_keep, c("Gender", "AgeC", "AgeM", "FirstMeal", "SinceDivers.", "BMI", "IngredN"))
adonis_data$unifracU = prep_for_adonis(beta$unifracU, meta, samples_to_keep, c("Gender", "AgeC", "AgeM", "FirstMeal", "SinceDivers.", "BMI", "IngredN"))
adonis_data$unifracW = prep_for_adonis(beta$unifracW, meta, samples_to_keep, c("Gender", "AgeC", "AgeM", "FirstMeal", "SinceDivers.", "BMI", "IngredN"))
nperms = 1000
set.seed(1337)
# Just location
adonis2(as.dist(adonis_data$bray[[1]]) ~ Location,
data = adonis_data$bray[[2]],
by = "terms",
permutations = nperms)
adonis2(as.dist(adonis_data$unifracU[[1]]) ~ Location,
data = adonis_data$unifracU[[2]],
by = "terms",
permutations = nperms)
adonis2(as.dist(adonis_data$unifracW[[1]]) ~ Location,
data = adonis_data$unifracW[[2]],
by = "terms",
permutations = nperms)
# Bray-Curtis with Location
plots$beta_ado$chi2_bray_loc =
adonis2(as.dist(adonis_data$bray[[1]]) ~ Location+AgeC+Gender+BMI+SharingMealAvg+IngredN,
data = adonis_data$bray[[2]],
by = "margin",
permutations = nperms) %>%
slice(1:(n()-2)) %>%
arrange(-R2) %>%
rownames_to_column(var="Variable") %>%
mutate(Variable = fct_reorder(Variable, R2)) %>%
mutate(Sig = stars.pval(`Pr(>F)`)) %>%
ggplot(., aes(x=Variable, y=R2))+
geom_bar(stat = "identity") +
geom_text(aes(label = Sig, y = R2*1.1), size=6, vjust=0.5, hjust=0) +
ylim(c(0, 0.14))+
coord_flip()+
scale_x_discrete(labels = c("SubLocation"="Area"))+
labs(x="")+
ggtitle("Bray-Curtis")+
theme(plot.title = element_text(hjust = 0.5))
# UniFracU with Location
plots$beta_ado$chi2_uniU_loc =
adonis2(as.dist(adonis_data$unifracU[[1]]) ~ Location+AgeC+Gender+BMI+SharingMealAvg+IngredN,
data = adonis_data$unifracU[[2]],
by = "margin",
permutations = nperms) %>%
slice(1:(n()-2)) %>%
arrange(-R2) %>%
rownames_to_column(var="Variable") %>%
mutate(Variable = fct_reorder(Variable, R2)) %>%
mutate(Sig = stars.pval(`Pr(>F)`)) %>%
ggplot(., aes(x=Variable, y=R2))+
geom_bar(stat = "identity") +
geom_text(aes(label = Sig, y = R2*1.1), size=6, vjust=0.5, hjust=0) +
ylim(c(0, 0.14))+
coord_flip()+
scale_x_discrete(labels = c("SubLocation"="Area"))+
labs(x="")+
ggtitle("UniFracU")+
theme(plot.title = element_text(hjust = 0.5))
# UniFracW with Location
plots$beta_ado$chi2_uniW_loc =
adonis2(as.dist(adonis_data$unifracW[[1]]) ~ Location+AgeC+Gender+BMI+SharingMealAvg+IngredN,
data = adonis_data$unifracW[[2]],
by = "margin",
permutations = nperms) %>%
slice(1:(n()-2)) %>%
arrange(-R2) %>%
rownames_to_column(var="Variable") %>%
mutate(Variable = fct_reorder(Variable, R2)) %>%
mutate(Sig = stars.pval(`Pr(>F)`)) %>%
ggplot(., aes(x=Variable, y=R2))+
geom_bar(stat = "identity") +
geom_text(aes(label = Sig, y = R2*1.1), size=6, vjust=0.5, hjust=0) +
ylim(c(0, 0.14))+
coord_flip()+
scale_x_discrete(labels = c("SubLocation"="Area"))+
labs(x="")+
ggtitle("UniFracW")+
theme(plot.title = element_text(hjust = 0.5))
View(plots)
point_size = 1
mds$all$bray = cmdscale(beta$bray, eig = TRUE, k = ncomps)
mds$all$unifracU = cmdscale(beta$unifracU, eig = TRUE, k = ncomps)
mds$all$unifracW = cmdscale(beta$unifracW, eig = TRUE, k = ncomps)
for (type in c("bray", "unifracU", "unifracW")) {
mds_points$all[[type]] = as.data.frame(mds$all[[type]]$points)
colnames(mds_points$all[[type]]) = paste0("PC", 1:ncol(mds_points$all[[type]]))
mds_points$all[[type]] = merge(mds_points$all[[type]], meta, by = 0)
rownames(mds_points$all[[type]]) = mds_points$all[[type]]$Row.names
mds_points$all[[type]] = mds_points$all[[type]][,-c(1)]
}
# Bray
ggplot(mds_points$all$bray, aes(x=PC1, y=PC2, color=Group4))+
geom_point(size=point_size)+
stat_ellipse(level = 0.68)
# UnifracU
ggplot(mds_points$all$unifracU, aes(x=PC1, y=PC2, color=Group4))+
geom_point(size=point_size)+
stat_ellipse(level = 0.68)
# UnifracW
ggplot(mds_points$all$unifracW, aes(x=PC1, y=PC2, color=Group4))+
geom_point(size=point_size)+
stat_ellipse(level = 0.68)
plots$beta$adu_chi_pcoa = ellipse_and_centroid(mds_points$all$bray, "PC1", "PC2", "Group4", F,
point_size = point_size, point_alpha = 0.5)+
scale_color_manual(values=cols$times,
labels=c("Mothers T1", "Infants T1", "Mothers T2", "Infants T2"),
name=NULL)+
theme(legend.position = "left")
samples_to_keep = rownames(filter(meta, AdultChild == "Child"))
mds$infants = list()
mds$infants$bray = cmdscale(beta$bray[samples_to_keep, samples_to_keep], eig = TRUE, k = ncomps)
mds$infants$unifracU = cmdscale(beta$unifracU[samples_to_keep, samples_to_keep], eig = TRUE, k = ncomps)
mds$infants$unifracW = cmdscale(beta$unifracW[samples_to_keep, samples_to_keep], eig = TRUE, k = ncomps)
mds_points$infants = list()
for (type in names(mds$infants )) {
mds_points$infants[[type]] = as.data.frame(mds$infants[[type]]$points)
colnames(mds_points$infants[[type]]) = paste0("PC", 1:ncol(mds_points$infants[[type]]))
mds_points$infants[[type]] = merge(mds_points$infants[[type]], meta, by = 0)
rownames(mds_points$infants[[type]]) = mds_points$infants[[type]]$Row.names
mds_points$infants[[type]] = mds_points$infants[[type]][,-c(1)]
}
plots$beta$chi_pcoa = ellipse_and_centroid(mds_points$infants$bray, "PC1", "PC2", "Group3", F,
point_size = point_size, point_alpha = 0.5)+
scale_color_manual(values=cols$infants,
labels=c("Rural\ninfants T1", "Urban\ninfants T1", "Rural\ninfants T2", "Urban\ninfants T2"),
name=NULL)
plots$beta$chi_pcoa
sparsity_hists = list()
for (level in c("asv", "spe", "gen", "phy")) {
sparsity_hists[[level]] = ab[[level]] %>%
summarize_all(function(x) sum(x == 0)) %>%
t() %>%
as.data.frame() %>%
ggplot(., aes(x=V1))+
geom_histogram(binwidth = 5) +
ggtitle(level) +
xlab("N of samples with zero abundance")
}
plots$extra$sparsity = ggarrange(plotlist = sparsity_hists, ncol = 1, nrow = 4)
plots$extra$sparsity
View(plots)
taxa$gen_defined = taxa$gen %>%
filter(Genus != "__") %>%
filter(!grepl("uncultured", String))
nonzeros_per_group = ab$gen %>%
dplyr::select(rownames(taxa$gen_defined)) %>%
merge(meta, by="row.names") %>%
group_by(Group3) %>%
summarize(across(starts_with("gen", ignore.case=F), function(x) sum(x != 0))) %>%
as.data.frame()
rownames(nonzeros_per_group) = nonzeros_per_group$Group3
nonzeros_per_group = nonzeros_per_group[,-c(1)]
taxa$gen_less_sparse = taxa$gen_defined[colnames(nonzeros_per_group)[which(colSums(nonzeros_per_group > 5) > 0)], ]
ab$gen_less_sparse = ab$gen[, rownames(taxa$gen_less_sparse)]
plots$extra$sparsity_kept_counts =  data.frame("X1" = rowSums(ab$gen_less_sparse) / rowSums(ab$gen)) %>%
ggplot(., aes(x=X1))+
geom_histogram(aes(y=cumsum(..count..)/nrow(ab$gen)))
plots$extra$sparsity_kept_counts
print(paste("Before filtering:", nrow(taxa$gen), "| After filtering:", nrow(taxa$gen_less_sparse)))
print(paste("Removed taxa account for: ", mean(100 - 100*rowSums(ab$gen_less_sparse) / rowSums(ab$gen)), "on average"))
print(paste("Before filtering:", nrow(taxa$gen), "| After filtering:", nrow(taxa$gen_less_sparse)))
print(paste("Removed taxa account for: ", mean(100 - 100*rowSums(ab$gen_less_sparse) / rowSums(ab$gen)), "on average"))
plots$maaslin = list()
dir.create(paste0(outpath, "/maaslin"))
ab_mothers = ab$gen_less_sparse %>%
filter(rownames(.) %in% rownames(subset(meta, AdultChild == "Adult")))
colnames(ab_mothers) = str_replace_all(taxa$gen_less_sparse[colnames(ab_mothers), "Genus"], "g__", "")
meta$Index = as.factor(meta$Index)
maaslin_mothers = Maaslin2(ab_mothers, meta, paste0(outpath, "/maaslin/mothers"),
fixed_effects = c("Location", "AgeC", "EntColi"),
random_effects = c("Index", "TimePoint"),
max_significance = 0.1,
min_prevalence = 0,
analysis_method = "LM",  # Default: LM
normalization = "TSS",   # Default: TSS
transform = "LOG")      # Default: LOG
res = data.frame(maaslin_mothers$results) %>%
filter(qval < 0.1) %>%
mutate(feature = fct_reorder(feature, qval, min)) %>%
mutate(logq = -sign(coef)*log(qval))
plots$maaslin$adults = ggplot(res, aes(x=feature, y=value, fill=logq, size=abs(coef)))+
geom_point(pch=21) +
scale_fill_gradient2(low="blue", mid="light grey", high="red", limits = c(-max(abs(res$logq)), max(abs(res$logq)))) +
scale_size(breaks = c(0.25, 0.5, 0.75, 1))+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
legend.direction="horizontal",
legend.position = "top",
legend.key.height = unit(2, "mm"))+
labs(x=NULL, y=NULL)+
scale_y_discrete(labels=c("TRUE"="EntColi+", "AgeC" = "TsincePreg."))
ab_infants = ab$gen_less_sparse %>%
filter(rownames(.) %in% rownames(subset(meta, AdultChild == "Child")))
colnames(ab_infants) = str_replace_all(taxa$gen_less_sparse[colnames(ab_infants), "Genus"], "g__", "")
meta["UrbanAgeC"] = (meta$Location == "Urban") * meta$AgeC
maaslin_infants = Maaslin2(ab_infants, meta, paste0(outpath, "/maaslin/infants"),
fixed_effects = c("Location", "AgeC", "UrbanAgeC"),
random_effects = c("Index", "TimePoint"),
max_significance = 0.1,
min_prevalence = 0,
analysis_method = "LM",  # Default: LM
normalization = "TSS",   # Default: TSS
transform = "LOG")      # Default: LOG
res = data.frame(maaslin_infants$results) %>%
filter(qval < 0.1) %>%
mutate(feature = fct_reorder(feature, qval, min)) %>%
mutate(logq = -sign(coef)*log(qval))
plots$maaslin$infants =
ggplot(res, aes(x=feature, y=value, fill=logq, size=abs(coef)))+
geom_point(pch=21) +
scale_fill_gradient2(low="blue", mid="light grey", high="red", limits = c(-max(abs(res$logq)), max(abs(res$logq)))) +
scale_size(breaks = c(0.2, 0.38, 0.58, 0.7))+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
legend.direction="horizontal",
legend.position = "top",
legend.key.height = unit(2, "mm"))+
labs(x=NULL, y=NULL)+
scale_y_discrete(labels = c("AgeC" = "Age", "UrbanAgeC" = "Urban*Age"))
plots$maaslin$infants
ab_mothers_norm = (1e6 * ab$gen / rowSums(ab$gen)) %>%
filter(., rownames(.) %in% rownames(ab_mothers)) %>%
dplyr::select(colnames(ab$gen_less_sparse))
colnames(ab_mothers_norm) = str_replace_all(taxa$gen_less_sparse[colnames(ab_mothers_norm), "Genus"], "g__", "")
genera = c("Enterococcus", "Butyrivibrio", "Oscillospira",
"Anaerovibrio", "Lachnospira", "Enterobacter",
"Izemoplasmatales", "Lactococcus")
tmp = ab_mothers_norm %>%
dplyr::select(genera) %>%
merge(., meta, by=0) %>%
group_by(Group3) %>%
mutate(outlier = is_outlier(BMI)) %>%
mutate(overweight = BMI > 25) %>%
mutate(above_median = (BMI > median(BMI, na.rm=T)))
# Consider outliers
tmp %>%
summarise(sum(outlier, na.rm=T))
tmp %>%
ggplot(., aes(x=Group3, y=BMI))+
geom_boxplot(outlier.shape = NA)+
geom_jitter(aes(color=outlier), width=0.2)
tmp %>%
ggplot(., aes(x=Group3, y=BMI))+
geom_boxplot(outlier.shape = NA)+
geom_jitter(aes(color=above_median), width=0.2)
# Look at usable disease states
tmp %>%
dplyr::select(Group3, DisResp:DisDiarr) %>%
summarize_all(sum, na.rm=T)
tmp %>%
filter(outlier==F) %>%
ggplot(., aes(x=overweight, y=Enterococcus))+
geom_boxplot(outlier.shape=NA)+
geom_jitter(width=0.2)+
stat_compare_means()
tmp %>%
filter(outlier==F) %>%
ggplot(., aes(x=overweight, y=Butyrivibrio))+
geom_boxplot(outlier.shape=NA)+
geom_jitter(width=0.2)+
stat_compare_means()
w = 174 # mm
h = 230
names(plots$qc)
figS1 = ggarrange(plots$coverage, plots$raref_gen, plots$raref_spe, plots$raref_asv,
plots$beta$all_pcoa, align = "hv", labels = "AUTO")
figS1
figS1 = ggarrange(plots$qc$coverage, plots$qc$raref_gen, plots$qc$raref_spe, plots$qc$raref_asv,
plots$beta$all_pcoa, align = "hv", labels = "AUTO")
figS1
figS1 = ggarrange(plots$qc$coverage, plots$qc$raref_gen, plots$qc$raref_spe, plots$qc$raref_asv,
plots$beta$all_pcoa, nrow = 3, ncol= 2, align = "hv", labels = "AUTO")
figS1
figS1 = ggarrange(plots$qc$coverage, plots$qc$raref_gen, plots$qc$raref_spe, plots$qc$raref_asv,
plots$beta$all_pcoa, nrow = 3, ncol= 2, align = "hv", axes="tblr", labels = "AUTO")
figS1 = ggarrange(plots$qc$coverage, plots$qc$raref_gen, plots$qc$raref_spe, plots$qc$raref_asv,
plots$beta$all_pcoa, nrow = 3, ncol= 2, align = "hv", axis="tblr", labels = "AUTO")
?ggarrange
